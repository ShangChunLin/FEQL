def fed_eqn():
     return sa2L3*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L4*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L5*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L6*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1) + (sa2L21*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L22*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L23*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L24*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L25*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L26*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L27*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1))*(sa2L28*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L29*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L30*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L31*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L32*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L33*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L34*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1)) + (sa2L35*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L36*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L37*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L38*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L39*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L40*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L41*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1))*(sa2L42*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L43*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L44*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L45*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L46*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L47*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L48*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1)) + (sa2L49*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L50*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L51*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L52*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L53*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L54*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L55*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1))*(sa2L56*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L57*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L58*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L59*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L60*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L61*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L62*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1)) + (sa2L63*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L64*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L65*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L66*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L67*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L68*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L69*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1))/(sa2L70*(sa1L0*sn0 + sa1L1*sn1 + sa1L2*sn2 + sa1L3*seps0*sn3 + sa1L4*seps0*sn4 + sa1L5*seps0*sn5) + sa2L71*(exp(sa1L10*seps0*sn4 + sa1L11*seps0*sn5 + sa1L6*sn0 + sa1L7*sn1 + sa1L8*sn2 + sa1L9*seps0*sn3) - 1) + sa2L72*log(sa1L12*sn0 + sa1L13*sn1 + sa1L14*sn2 + sa1L15*seps0*sn3 + sa1L16*seps0*sn4 + sa1L17*seps0*sn5 + 1) + sa2L73*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L74*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L75*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L76*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1) + 1) + exp(sa2L10*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L11*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L12*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L13*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1)) + log(sa2L17*(sa1L18*sn0 + sa1L19*sn1 + sa1L20*sn2 + sa1L21*seps0*sn3 + sa1L22*seps0*sn4 + sa1L23*seps0*sn5)*(sa1L24*sn0 + sa1L25*sn1 + sa1L26*sn2 + sa1L27*seps0*sn3 + sa1L28*seps0*sn4 + sa1L29*seps0*sn5) + sa2L18*(sa1L30*sn0 + sa1L31*sn1 + sa1L32*sn2 + sa1L33*seps0*sn3 + sa1L34*seps0*sn4 + sa1L35*seps0*sn5)*(sa1L36*sn0 + sa1L37*sn1 + sa1L38*sn2 + sa1L39*seps0*sn3 + sa1L40*seps0*sn4 + sa1L41*seps0*sn5) + sa2L19*(sa1L42*sn0 + sa1L43*sn1 + sa1L44*sn2 + sa1L45*seps0*sn3 + sa1L46*seps0*sn4 + sa1L47*seps0*sn5)*(sa1L48*sn0 + sa1L49*sn1 + sa1L50*sn2 + sa1L51*seps0*sn3 + sa1L52*seps0*sn4 + sa1L53*seps0*sn5) + sa2L20*(sa1L54*sn0 + sa1L55*sn1 + sa1L56*sn2 + sa1L57*seps0*sn3 + sa1L58*seps0*sn4 + sa1L59*seps0*sn5)/(sa1L60*sn0 + sa1L61*sn1 + sa1L62*sn2 + sa1L63*seps0*sn3 + sa1L64*seps0*sn4 + sa1L65*seps0*sn5 + 1) + 1) - 1